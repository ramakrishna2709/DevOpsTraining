###############
Ansible runs tasks on hosts, and all you need is SSH. In other words, Ansible runs in one place (your laptop, or a deploy box like Rundeck or Tower, or somewhere else), opens up SSH connections to your remote hosts and then runs commands directly on them.

################Terminology
The following list contains a quick overview of the most relevant terms used by Ansible:

#####Control Node: the machine where Ansible is installed, responsible for running the provisioning on the servers you are managing.
#####Inventory: an INI file that contains information about the servers you are managing.
############Playbook: a YAML file containing a series of procedures that should be automated.
########Task: a block that defines a single procedure to be executed, e.g.: install a package.
########Module: a module typically abstracts a system task, like dealing with packages or creating and changing files. Ansible has a multitude of built-in modules, but you can also create custom ones.
#########Role: a set of related playbooks, templates and other files, organized in a pre-defined way to facilitate reuse and share.
#####Play: a provisioning executed from start to finish is called a play.
######3Facts: global variables containing information about the system, like network interfaces or operating system.
######Handlers: used to trigger service status changes, like restarting or reloading a service.

#################Task
A task can be anything from creating a bucket in AWS S3, to launching an instance in Azure, installing pip on a server, updating a config file, or simply checking the time on a remote host. In this tutorial we focus on tasks to configure a remote Ubuntu host.

For example, this task installs pip on Ubuntu:

- name: ensure pip is installed
    apt:
      name: python-pip
      state: installed
	  
#####################Host
The host is where the tasks get run. It can be any number of remote hosts that you have SSH access to, or localhost.

Your hosts respective IP addresses or hostnames need to be stored in an inventory file for Ansible to be aware of them. Later when you run Ansible, you will specify one or more hosts, or groups of hosts, defined in the inventory file.	

####################inventory ##########
[group1]
host01 ansible_ssh_user=ubuntu

#################Adhoc COmmands

$ansible <group> -m <module>

Check the current date and time of the remote host:

>>>>>>>>>>>>>>>>$ansible group1 -i myhosts -m command -a date
ansible group1 hosts -m command -a date

(if the command fails the first time, try again in few seconds, as the test host may not yet have been provisioned)

group1 = group to run against. You can also use the name of an individual host, so host01 would work just as well for this example.

myhosts = name of the inventory file listing all available hosts

command = module to use (the command module returns the result of a bash command)

date = argument for the module, in this case a standard shell command date.

When you run the command above, Ansible establishes an SSH connection with the remote host, executes the command, captures the output and returns it. 

#########################Playbook
A playbook is an entirely different way of running Ansible, that is far more powerful.

###################What is a play?
A play is a set of tasks mapped to a set of hosts. Plays are organised inside a text file called a playbook. 
 

###############################Running a playbook
This playbook runs one task, on our one host, ex:host01. Note the indentation - it's important for how the file gets parsed. Blank lines are ignored, but makes the playbook more readable for humans.

---
- hosts: host01

    become: true

    tasks:
      - name: ensure latest sysstat is installed
        apt:
          name: sysstat
          state: latest

####################To run the playbook, use the ansible-playbook command with the inventory file myhosts:

>>>>>>>>>>>>>>$ansible-playbook -i myhosts site.yml

########################Playbook breakdown
What happened here?

--- denotes the beginning of a YAML file
hosts: host tells Ansible to run the tasks on the host host
become: true makes all your tasks run as sudo
- name: is basically a comment, describing what the task does
apt: specifies the module we want to use
name: is an argument to the apt module, that specifies the name of the package to install.



#############################ad-hoc commands#########################3
$ansible group1 -i myhosts -m command -a date

