 I assume the root folder of your ansible playbooks is under /etc/ansible/.



###################3Host Variables
First, there will be host specifical need, you can define those variables in two ways.

########Ad hoc Way
The first is to define them in the inventory files, like the following:

[atlanta]
host1 http_port=80 maxRequestsPerChild=808
host2 http_port=303 maxRequestsPerChild=909
Ansible Best Practice
To better maintain your playbooks, it would be better you define your host specifical variables seperated from inventory file. Ansible provides mechanism to let you define variables in host_vars folder. For example:

---
# file: /etc/ansible/host_vars/xyz.boston.example.com
ntp_server: override.example.com

#############################Group Variables
Second, beyond host specifical variables, there is group variables. Similarly, there is also two ways to define group variables.

Ad hoc Way
The first is to define them in the inventory files, like the following:

[atlanta]
host1
host2

[atlanta:vars]
ntp_server=ntp.atlanta.example.com
proxy=proxy.atlanta.example.com
In the above example, lines under the [altanta:vars] define variables of group atlanta.

Best Practice
Similarly, for ansible best practice, you should define group specifical files in host_vars file. For example, you can define variables for group raleigh in file /etc/ansible/group_vars/raleigh, using the following lines:

---
ntp_server: acme.example.org
database_server: storage.example.org
Some Built-in Variables Provided by Ansible
ansible_ssh_host
  The name of the host to connect to, if different from the alias you wish to give to it.
ansible_ssh_port
  The ssh port number, if not 22
ansible_ssh_user
  The default ssh user name to use.
ansible_ssh_pass
  The ssh password to use (this is insecure, we strongly recommend using --ask-pass or SSH keys)
ansible_sudo_pass
  The sudo password to use (this is insecure, we strongly recommend using --ask-sudo-pass)
ansible_connection
  Connection type of the host. Candidates are local, ssh or paramiko.  The default is paramiko before Ansible 1.2, and 'smart' afterwards which detects whether usage of 'ssh' would be feasible based on whether ControlPersist is supported.
ansible_ssh_private_key_file
  Private key file used by ssh.  Useful if using multiple keys and you don't want to use SSH agent.
ansible_python_interpreter
  The target host python path. This is useful for systems with more
  than one Python or not located at "/usr/bin/python" such as \*BSD, or where /usr/bin/python
  is not a 2.X series Python.  We do not use the "/usr/bin/env" mechanism as that requires the remote user's
  path to be set right and also assumes the "python" executable is named python, where the executable might
  be named something like "python26".
ansible\_\*\_interpreter
  Works for anything such as ruby or perl and works just like ansible_python_interpreter.
  This replaces shebang of modules which will run on that host.

  ############################33Facts
There is another type of variables called fact, which is built-in and used to store information discovered while probing remote hosts. More details can be found here.

######################Playbook Variables
Variables defined in host_vars and group_vars are actually attributes of hosts and groups. There is also need to define variables in playbook, which normally is used for operation. Again, there are also two ways to define ansible playbook specifical variables.

From now on, examples are taken from pedantically_commented_playbook.

Ad hoc Way
The first is to define using var attribute. For example:

###########
# Playbook attribute: vars
# Default: none
# Required: no
# Description:
#  Set configuration variables passed to templates & included playbooks
#  and handlers.  See below for examples.
vars:
color: brown

web:
  memcache: 192.168.1.2
  httpd: apache
# Tree-like structures work as expected, but be careful to surround
#  the variable name with ${} when using.
#
# For this example, ${web.memcache} and ${web.apache} are both usable
#  variables.

########
# The following works in Ansible 0.5 and later, and will set $config_path
# "/etc/ntpd.conf" as expected.
#
# In older versions, $config_path will be set to the string "/etc/$config"
#
config: ntpd.conf
config_path: /etc/$config

########
# Variables can be set conditionally. This is actually a tiny snippet
# of Python that will get filled in and evaluated during playbook execution.
# This expressioun should always evaluate to True or False.
#
# In this playbook, this will always evaluate to False, because 'color'
#  is set to 'brown' above.
#
# When ansible interprets the following, it will first expand $color to
# 'brown' and then evaluate 'brown' == 'blue' as a Python expression.
is_color_blue: "'$color' == 'blue'"

#####
# Builtin Variables
#
# Everything that the 'setup' module provides can be used in the
# vars section.  Ansible native, Facter, and Ohai facts can all be
# used.
#
# Run the setup module to see what else you can use:
# ansible -m setup -i /path/to/hosts.ini host1
main_vhost: ${ansible_fqdn}
public_ip:  ${ansible_eth0.ipv4.address}

# vars_files is better suited for distro-specific settings, however...
is_ubuntu: "'${ansible_distribution}' == 'ubuntu'"
Best Practice
Second, you can use vars_file to organize your variables. This is extremely useful when you are in need to provide different variables when concerning dynamically determined information. For example:

##########
# Playbook attribute: vars_files
# Required: no
# Description:
#   Specifies a list of YAML files to load variables from.
#
#   Always evaluated after the 'vars' section, no matter which section
#   occurs first in the playbook.  Examples are below.
#
#   Example YAML for a file to be included by vars_files:
#   ---
#   monitored_by: phobos.mars.nasa.gov
#   fish_sticks: "good with custard"
#   # (END OF DOCUMENT)
#
#   A 'vars' YAML file represents a list of variables. Don't use playbook
#   YAML for a 'vars' file.
#
#   Remove the indentation & comments of course, the '---' should be at
#   the left margin in the variables file.
#
vars_files:
# Include a file from this absolute path
- /srv/ansible/vars/vars_file.yml

# Include a file from a path relative to this playbook
- vars/vars_file.yml

# By the way, variables set in 'vars' are available here.
- vars/$hostname.yml

# It's also possible to pass an array of files, in which case
# Ansible will loop over the array and include the first file that
# exists.  If none exist, ansible-playbook will halt with an error.
#
# An excellent way to handle platform-specific differences.
- [ vars/$platform.yml, vars/default.yml ]

# Files in vars_files process in order, so later files can
# provide more specific configuration:
- [ vars/$host.yml ]

# Hey, but if you're doing host-specific variable files, you might
# consider setting the variable for a group in your hosts.ini and
# adding your host to that group. Just a thought.
Passing Variables On The Command Line
You are absolutely in need to switch from test machine to real deployment, which means you need to change the host rather frequently. This is the case where command line variables are useful.

For example, you need to change host name each time. To test, you use:

ansible-playbook playbook.yml --extra-vars "hosts=local_machine"
As for real deployment, you can use:

ansible-playbook playbook.yml --extra-vars "hosts=servers"